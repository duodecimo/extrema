"""
Django settings for conf project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-$k)kzfv^%rl2+h8ccnst%vn^*9o^=i4l#*5i^&$-=wngrh+3xz"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

if DEBUG:
    print("DEBUG is ON.")
    ALLOWED_HOSTS = ["*", "localhost", "0.0.0.0", ".ngrok.io"]
else:
    print("DEBUG is OFF")
    ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "colorlog",
    "apps.movies",
    "apps.users",
    "drf_spectacular",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "request_logging.middleware.LoggingMiddleware",
]

ROOT_URLCONF = "conf.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            "",
            os.path.join(BASE_DIR, "dist"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "conf.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# Directory where Django static files are collected
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# URL where static files will be served
STATIC_URL = "/static/"

# Vue assets directory (assetsDir)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "dist/static"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=60),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
}

AUTH_USER_MODEL = "users.User"

SPECTACULAR_SETTINGS = {
    "TITLE": "Extrema API",
    "DESCRIPTION": "Uploads & Streamming",
    "VERSION": "1.0.0",
    "CAMELIZE_NAMES": True,
    "COMPONENT_SPLIT_REQUEST": True,
    "SERVE_PERMISSIONS": [
        "rest_framework.permissions.AllowAny"
    ],  # rest_framework.permissions.IsAuthenticated
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "filter": True,
        "displayRequestDuration": True,
        "syntaxHighlight.activate": True,
        "syntaxHighlight.theme": "monokai",
    },
}

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

EMAIL_USE_TLS = True
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_HOST_USER = "extremasystems@gmail.com"
EMAIL_HOST_PASSWORD = "fwjfsbyndikqhzry"

# LOGGING

REQUEST_LOGGING_ENABLE_COLORIZE = False
SENSITIVE_WORDS = ["password", "pw", "refresh"]

# Obs.: o valor de interval em logging.TimedRotatingFileHandler handlers
# vai determinar quantos arquivos de backup antigos ser√£o guardados

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "pw": {"()": "apps.utils.logging_formatters.PasswordFormatter"},
        "verbose": {
            "format": "{levelname} {asctime} {module} {pathname} {funcName} line number: {lineno:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {asctime} {message}",
            "style": "{",
        },
        "colored": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(log_color)s %(levelname)-8s %(asctime)s %(pathname)s %(funcName)s %(message)s",
            "reset": True,
            "log_colors": {
                "DEBUG": "cyan",
                "INFO": "green",
                "WARNING": "bold_yellow",
                "ERROR": "red",
                "CRITICAL": "red,bg_white",
            },
            "style": "%",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "pw_filter": {
            "()": "apps.utils.logging_filters.PasswordFilter",
        },
    },
    "handlers": {
        "file_app_sys": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "interval": 3,
            "filename": "/tmp/app_sys.log",
            "formatter": "simple",
        },
        "file_requests": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "interval": 3,
            "filters": ["require_debug_true", "pw_filter"],
            "filename": "/tmp/requests.log",
            "formatter": "simple",
        },
        "file_apps": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "interval": 3,
            "filename": "/tmp/apps.log",
            "formatter": "verbose",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "colored",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file_app_sys"],
            "level": "INFO",
            "propagate": True,
        },
        "apps": {
            "handlers": ["console", "file_apps"],
            "level": "DEBUG",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["file_requests"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}
